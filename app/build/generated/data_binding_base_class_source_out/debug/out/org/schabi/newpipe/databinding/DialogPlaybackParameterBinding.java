// Generated by view binder compiler. Do not edit!
package org.schabi.newpipe.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.CheckBox;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.ScrollView;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.AppCompatSeekBar;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;
import org.schabi.newpipe.R;

public final class DialogPlaybackParameterBinding implements ViewBinding {
  @NonNull
  private final ScrollView rootView;

  @NonNull
  public final RelativeLayout pitchControl;

  @NonNull
  public final TextView pitchControlText;

  @NonNull
  public final TextView pitchCurrentText;

  @NonNull
  public final TextView pitchMaximumText;

  @NonNull
  public final TextView pitchMinimumText;

  @NonNull
  public final AppCompatSeekBar pitchSeekbar;

  @NonNull
  public final TextView pitchStepDown;

  @NonNull
  public final TextView pitchStepUp;

  @NonNull
  public final View separatorCheckbox;

  @NonNull
  public final View separatorPitch;

  @NonNull
  public final View separatorStepSizeSelector;

  @NonNull
  public final CheckBox skipSilenceCheckbox;

  @NonNull
  public final TextView stepSizeFivePercent;

  @NonNull
  public final TextView stepSizeOneHundredPercent;

  @NonNull
  public final TextView stepSizeOnePercent;

  @NonNull
  public final LinearLayout stepSizeSelector;

  @NonNull
  public final TextView stepSizeTenPercent;

  @NonNull
  public final TextView stepSizeTwentyFivePercent;

  @NonNull
  public final RelativeLayout tempoControl;

  @NonNull
  public final TextView tempoControlText;

  @NonNull
  public final TextView tempoCurrentText;

  @NonNull
  public final TextView tempoMaximumText;

  @NonNull
  public final TextView tempoMinimumText;

  @NonNull
  public final AppCompatSeekBar tempoSeekbar;

  @NonNull
  public final TextView tempoStepDown;

  @NonNull
  public final TextView tempoStepUp;

  @NonNull
  public final CheckBox unhookCheckbox;

  private DialogPlaybackParameterBinding(@NonNull ScrollView rootView,
      @NonNull RelativeLayout pitchControl, @NonNull TextView pitchControlText,
      @NonNull TextView pitchCurrentText, @NonNull TextView pitchMaximumText,
      @NonNull TextView pitchMinimumText, @NonNull AppCompatSeekBar pitchSeekbar,
      @NonNull TextView pitchStepDown, @NonNull TextView pitchStepUp,
      @NonNull View separatorCheckbox, @NonNull View separatorPitch,
      @NonNull View separatorStepSizeSelector, @NonNull CheckBox skipSilenceCheckbox,
      @NonNull TextView stepSizeFivePercent, @NonNull TextView stepSizeOneHundredPercent,
      @NonNull TextView stepSizeOnePercent, @NonNull LinearLayout stepSizeSelector,
      @NonNull TextView stepSizeTenPercent, @NonNull TextView stepSizeTwentyFivePercent,
      @NonNull RelativeLayout tempoControl, @NonNull TextView tempoControlText,
      @NonNull TextView tempoCurrentText, @NonNull TextView tempoMaximumText,
      @NonNull TextView tempoMinimumText, @NonNull AppCompatSeekBar tempoSeekbar,
      @NonNull TextView tempoStepDown, @NonNull TextView tempoStepUp,
      @NonNull CheckBox unhookCheckbox) {
    this.rootView = rootView;
    this.pitchControl = pitchControl;
    this.pitchControlText = pitchControlText;
    this.pitchCurrentText = pitchCurrentText;
    this.pitchMaximumText = pitchMaximumText;
    this.pitchMinimumText = pitchMinimumText;
    this.pitchSeekbar = pitchSeekbar;
    this.pitchStepDown = pitchStepDown;
    this.pitchStepUp = pitchStepUp;
    this.separatorCheckbox = separatorCheckbox;
    this.separatorPitch = separatorPitch;
    this.separatorStepSizeSelector = separatorStepSizeSelector;
    this.skipSilenceCheckbox = skipSilenceCheckbox;
    this.stepSizeFivePercent = stepSizeFivePercent;
    this.stepSizeOneHundredPercent = stepSizeOneHundredPercent;
    this.stepSizeOnePercent = stepSizeOnePercent;
    this.stepSizeSelector = stepSizeSelector;
    this.stepSizeTenPercent = stepSizeTenPercent;
    this.stepSizeTwentyFivePercent = stepSizeTwentyFivePercent;
    this.tempoControl = tempoControl;
    this.tempoControlText = tempoControlText;
    this.tempoCurrentText = tempoCurrentText;
    this.tempoMaximumText = tempoMaximumText;
    this.tempoMinimumText = tempoMinimumText;
    this.tempoSeekbar = tempoSeekbar;
    this.tempoStepDown = tempoStepDown;
    this.tempoStepUp = tempoStepUp;
    this.unhookCheckbox = unhookCheckbox;
  }

  @Override
  @NonNull
  public ScrollView getRoot() {
    return rootView;
  }

  @NonNull
  public static DialogPlaybackParameterBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static DialogPlaybackParameterBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.dialog_playback_parameter, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static DialogPlaybackParameterBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.pitchControl;
      RelativeLayout pitchControl = ViewBindings.findChildViewById(rootView, id);
      if (pitchControl == null) {
        break missingId;
      }

      id = R.id.pitchControlText;
      TextView pitchControlText = ViewBindings.findChildViewById(rootView, id);
      if (pitchControlText == null) {
        break missingId;
      }

      id = R.id.pitchCurrentText;
      TextView pitchCurrentText = ViewBindings.findChildViewById(rootView, id);
      if (pitchCurrentText == null) {
        break missingId;
      }

      id = R.id.pitchMaximumText;
      TextView pitchMaximumText = ViewBindings.findChildViewById(rootView, id);
      if (pitchMaximumText == null) {
        break missingId;
      }

      id = R.id.pitchMinimumText;
      TextView pitchMinimumText = ViewBindings.findChildViewById(rootView, id);
      if (pitchMinimumText == null) {
        break missingId;
      }

      id = R.id.pitchSeekbar;
      AppCompatSeekBar pitchSeekbar = ViewBindings.findChildViewById(rootView, id);
      if (pitchSeekbar == null) {
        break missingId;
      }

      id = R.id.pitchStepDown;
      TextView pitchStepDown = ViewBindings.findChildViewById(rootView, id);
      if (pitchStepDown == null) {
        break missingId;
      }

      id = R.id.pitchStepUp;
      TextView pitchStepUp = ViewBindings.findChildViewById(rootView, id);
      if (pitchStepUp == null) {
        break missingId;
      }

      id = R.id.separatorCheckbox;
      View separatorCheckbox = ViewBindings.findChildViewById(rootView, id);
      if (separatorCheckbox == null) {
        break missingId;
      }

      id = R.id.separatorPitch;
      View separatorPitch = ViewBindings.findChildViewById(rootView, id);
      if (separatorPitch == null) {
        break missingId;
      }

      id = R.id.separatorStepSizeSelector;
      View separatorStepSizeSelector = ViewBindings.findChildViewById(rootView, id);
      if (separatorStepSizeSelector == null) {
        break missingId;
      }

      id = R.id.skipSilenceCheckbox;
      CheckBox skipSilenceCheckbox = ViewBindings.findChildViewById(rootView, id);
      if (skipSilenceCheckbox == null) {
        break missingId;
      }

      id = R.id.stepSizeFivePercent;
      TextView stepSizeFivePercent = ViewBindings.findChildViewById(rootView, id);
      if (stepSizeFivePercent == null) {
        break missingId;
      }

      id = R.id.stepSizeOneHundredPercent;
      TextView stepSizeOneHundredPercent = ViewBindings.findChildViewById(rootView, id);
      if (stepSizeOneHundredPercent == null) {
        break missingId;
      }

      id = R.id.stepSizeOnePercent;
      TextView stepSizeOnePercent = ViewBindings.findChildViewById(rootView, id);
      if (stepSizeOnePercent == null) {
        break missingId;
      }

      id = R.id.stepSizeSelector;
      LinearLayout stepSizeSelector = ViewBindings.findChildViewById(rootView, id);
      if (stepSizeSelector == null) {
        break missingId;
      }

      id = R.id.stepSizeTenPercent;
      TextView stepSizeTenPercent = ViewBindings.findChildViewById(rootView, id);
      if (stepSizeTenPercent == null) {
        break missingId;
      }

      id = R.id.stepSizeTwentyFivePercent;
      TextView stepSizeTwentyFivePercent = ViewBindings.findChildViewById(rootView, id);
      if (stepSizeTwentyFivePercent == null) {
        break missingId;
      }

      id = R.id.tempoControl;
      RelativeLayout tempoControl = ViewBindings.findChildViewById(rootView, id);
      if (tempoControl == null) {
        break missingId;
      }

      id = R.id.tempoControlText;
      TextView tempoControlText = ViewBindings.findChildViewById(rootView, id);
      if (tempoControlText == null) {
        break missingId;
      }

      id = R.id.tempoCurrentText;
      TextView tempoCurrentText = ViewBindings.findChildViewById(rootView, id);
      if (tempoCurrentText == null) {
        break missingId;
      }

      id = R.id.tempoMaximumText;
      TextView tempoMaximumText = ViewBindings.findChildViewById(rootView, id);
      if (tempoMaximumText == null) {
        break missingId;
      }

      id = R.id.tempoMinimumText;
      TextView tempoMinimumText = ViewBindings.findChildViewById(rootView, id);
      if (tempoMinimumText == null) {
        break missingId;
      }

      id = R.id.tempoSeekbar;
      AppCompatSeekBar tempoSeekbar = ViewBindings.findChildViewById(rootView, id);
      if (tempoSeekbar == null) {
        break missingId;
      }

      id = R.id.tempoStepDown;
      TextView tempoStepDown = ViewBindings.findChildViewById(rootView, id);
      if (tempoStepDown == null) {
        break missingId;
      }

      id = R.id.tempoStepUp;
      TextView tempoStepUp = ViewBindings.findChildViewById(rootView, id);
      if (tempoStepUp == null) {
        break missingId;
      }

      id = R.id.unhookCheckbox;
      CheckBox unhookCheckbox = ViewBindings.findChildViewById(rootView, id);
      if (unhookCheckbox == null) {
        break missingId;
      }

      return new DialogPlaybackParameterBinding((ScrollView) rootView, pitchControl,
          pitchControlText, pitchCurrentText, pitchMaximumText, pitchMinimumText, pitchSeekbar,
          pitchStepDown, pitchStepUp, separatorCheckbox, separatorPitch, separatorStepSizeSelector,
          skipSilenceCheckbox, stepSizeFivePercent, stepSizeOneHundredPercent, stepSizeOnePercent,
          stepSizeSelector, stepSizeTenPercent, stepSizeTwentyFivePercent, tempoControl,
          tempoControlText, tempoCurrentText, tempoMaximumText, tempoMinimumText, tempoSeekbar,
          tempoStepDown, tempoStepUp, unhookCheckbox);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
