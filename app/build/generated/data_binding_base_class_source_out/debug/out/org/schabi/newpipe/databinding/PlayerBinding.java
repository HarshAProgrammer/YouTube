// Generated by view binder compiler. Do not edit!
package org.schabi.newpipe.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.ProgressBar;
import android.widget.RelativeLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.AppCompatImageButton;
import androidx.appcompat.widget.AppCompatTextView;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.exoplayer2.ui.SubtitleView;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;
import org.schabi.newpipe.R;
import org.schabi.newpipe.views.ExpandableSurfaceView;
import org.schabi.newpipe.views.FocusAwareSeekBar;

public final class PlayerBinding implements ViewBinding {
  @NonNull
  private final RelativeLayout rootView;

  @NonNull
  public final LinearLayout bottomControls;

  @NonNull
  public final LinearLayout bottomSeekbarPreviewLayout;

  @NonNull
  public final ImageView brightnessImageView;

  @NonNull
  public final ProgressBar brightnessProgressBar;

  @NonNull
  public final RelativeLayout brightnessRelativeLayout;

  @NonNull
  public final TextView captionTextView;

  @NonNull
  public final TextView channelTextView;

  @NonNull
  public final Button closeButton;

  @NonNull
  public final View closingOverlay;

  @NonNull
  public final ImageView controlAnimationView;

  @NonNull
  public final TextView currentDisplaySeek;

  @NonNull
  public final ImageView currentSeekbarPreviewThumbnail;

  @NonNull
  public final ImageView endScreen;

  @NonNull
  public final AppCompatImageButton fullScreenButton;

  @NonNull
  public final RecyclerView itemsList;

  @NonNull
  public final AppCompatImageButton itemsListClose;

  @NonNull
  public final RelativeLayout itemsListControl;

  @NonNull
  public final AppCompatTextView itemsListHeaderDuration;

  @NonNull
  public final AppCompatTextView itemsListHeaderTitle;

  @NonNull
  public final RelativeLayout itemsListPanel;

  @NonNull
  public final RelativeLayout loadingPanel;

  @NonNull
  public final LinearLayout metadataView;

  @NonNull
  public final AppCompatImageButton moreOptionsButton;

  @NonNull
  public final AppCompatImageButton openInBrowser;

  @NonNull
  public final AppCompatImageButton playNextButton;

  @NonNull
  public final AppCompatImageButton playPauseButton;

  @NonNull
  public final AppCompatImageButton playPreviousButton;

  @NonNull
  public final AppCompatImageButton playWithKodi;

  @NonNull
  public final RelativeLayout playbackControlRoot;

  @NonNull
  public final TextView playbackCurrentTime;

  @NonNull
  public final TextView playbackEndTime;

  @NonNull
  public final TextView playbackLiveSync;

  @NonNull
  public final FocusAwareSeekBar playbackSeekBar;

  @NonNull
  public final TextView playbackSpeed;

  @NonNull
  public final RelativeLayout playbackWindowRoot;

  @NonNull
  public final View playerBottomShadow;

  @NonNull
  public final AppCompatImageButton playerCloseButton;

  @NonNull
  public final RelativeLayout playerOverlays;

  @NonNull
  public final View playerTopShadow;

  @NonNull
  public final LinearLayout primaryControls;

  @NonNull
  public final ProgressBar progressBarLoadingPanel;

  @NonNull
  public final TextView qualityTextView;

  @NonNull
  public final AppCompatImageButton queueButton;

  @NonNull
  public final AppCompatImageButton repeatButton;

  @NonNull
  public final TextView resizeTextView;

  @NonNull
  public final AppCompatImageButton screenRotationButton;

  @NonNull
  public final LinearLayout secondaryControls;

  @NonNull
  public final LinearLayout seekbarPreviewContainer;

  @NonNull
  public final AppCompatImageButton segmentsButton;

  @NonNull
  public final AppCompatImageButton share;

  @NonNull
  public final AppCompatImageButton shuffleButton;

  @NonNull
  public final SubtitleView subtitleView;

  @NonNull
  public final View surfaceForeground;

  @NonNull
  public final ExpandableSurfaceView surfaceView;

  @NonNull
  public final AppCompatImageButton switchMute;

  @NonNull
  public final TextView titleTextView;

  @NonNull
  public final LinearLayout topControls;

  @NonNull
  public final ImageView volumeImageView;

  @NonNull
  public final ProgressBar volumeProgressBar;

  @NonNull
  public final RelativeLayout volumeRelativeLayout;

  private PlayerBinding(@NonNull RelativeLayout rootView, @NonNull LinearLayout bottomControls,
      @NonNull LinearLayout bottomSeekbarPreviewLayout, @NonNull ImageView brightnessImageView,
      @NonNull ProgressBar brightnessProgressBar, @NonNull RelativeLayout brightnessRelativeLayout,
      @NonNull TextView captionTextView, @NonNull TextView channelTextView,
      @NonNull Button closeButton, @NonNull View closingOverlay,
      @NonNull ImageView controlAnimationView, @NonNull TextView currentDisplaySeek,
      @NonNull ImageView currentSeekbarPreviewThumbnail, @NonNull ImageView endScreen,
      @NonNull AppCompatImageButton fullScreenButton, @NonNull RecyclerView itemsList,
      @NonNull AppCompatImageButton itemsListClose, @NonNull RelativeLayout itemsListControl,
      @NonNull AppCompatTextView itemsListHeaderDuration,
      @NonNull AppCompatTextView itemsListHeaderTitle, @NonNull RelativeLayout itemsListPanel,
      @NonNull RelativeLayout loadingPanel, @NonNull LinearLayout metadataView,
      @NonNull AppCompatImageButton moreOptionsButton, @NonNull AppCompatImageButton openInBrowser,
      @NonNull AppCompatImageButton playNextButton, @NonNull AppCompatImageButton playPauseButton,
      @NonNull AppCompatImageButton playPreviousButton, @NonNull AppCompatImageButton playWithKodi,
      @NonNull RelativeLayout playbackControlRoot, @NonNull TextView playbackCurrentTime,
      @NonNull TextView playbackEndTime, @NonNull TextView playbackLiveSync,
      @NonNull FocusAwareSeekBar playbackSeekBar, @NonNull TextView playbackSpeed,
      @NonNull RelativeLayout playbackWindowRoot, @NonNull View playerBottomShadow,
      @NonNull AppCompatImageButton playerCloseButton, @NonNull RelativeLayout playerOverlays,
      @NonNull View playerTopShadow, @NonNull LinearLayout primaryControls,
      @NonNull ProgressBar progressBarLoadingPanel, @NonNull TextView qualityTextView,
      @NonNull AppCompatImageButton queueButton, @NonNull AppCompatImageButton repeatButton,
      @NonNull TextView resizeTextView, @NonNull AppCompatImageButton screenRotationButton,
      @NonNull LinearLayout secondaryControls, @NonNull LinearLayout seekbarPreviewContainer,
      @NonNull AppCompatImageButton segmentsButton, @NonNull AppCompatImageButton share,
      @NonNull AppCompatImageButton shuffleButton, @NonNull SubtitleView subtitleView,
      @NonNull View surfaceForeground, @NonNull ExpandableSurfaceView surfaceView,
      @NonNull AppCompatImageButton switchMute, @NonNull TextView titleTextView,
      @NonNull LinearLayout topControls, @NonNull ImageView volumeImageView,
      @NonNull ProgressBar volumeProgressBar, @NonNull RelativeLayout volumeRelativeLayout) {
    this.rootView = rootView;
    this.bottomControls = bottomControls;
    this.bottomSeekbarPreviewLayout = bottomSeekbarPreviewLayout;
    this.brightnessImageView = brightnessImageView;
    this.brightnessProgressBar = brightnessProgressBar;
    this.brightnessRelativeLayout = brightnessRelativeLayout;
    this.captionTextView = captionTextView;
    this.channelTextView = channelTextView;
    this.closeButton = closeButton;
    this.closingOverlay = closingOverlay;
    this.controlAnimationView = controlAnimationView;
    this.currentDisplaySeek = currentDisplaySeek;
    this.currentSeekbarPreviewThumbnail = currentSeekbarPreviewThumbnail;
    this.endScreen = endScreen;
    this.fullScreenButton = fullScreenButton;
    this.itemsList = itemsList;
    this.itemsListClose = itemsListClose;
    this.itemsListControl = itemsListControl;
    this.itemsListHeaderDuration = itemsListHeaderDuration;
    this.itemsListHeaderTitle = itemsListHeaderTitle;
    this.itemsListPanel = itemsListPanel;
    this.loadingPanel = loadingPanel;
    this.metadataView = metadataView;
    this.moreOptionsButton = moreOptionsButton;
    this.openInBrowser = openInBrowser;
    this.playNextButton = playNextButton;
    this.playPauseButton = playPauseButton;
    this.playPreviousButton = playPreviousButton;
    this.playWithKodi = playWithKodi;
    this.playbackControlRoot = playbackControlRoot;
    this.playbackCurrentTime = playbackCurrentTime;
    this.playbackEndTime = playbackEndTime;
    this.playbackLiveSync = playbackLiveSync;
    this.playbackSeekBar = playbackSeekBar;
    this.playbackSpeed = playbackSpeed;
    this.playbackWindowRoot = playbackWindowRoot;
    this.playerBottomShadow = playerBottomShadow;
    this.playerCloseButton = playerCloseButton;
    this.playerOverlays = playerOverlays;
    this.playerTopShadow = playerTopShadow;
    this.primaryControls = primaryControls;
    this.progressBarLoadingPanel = progressBarLoadingPanel;
    this.qualityTextView = qualityTextView;
    this.queueButton = queueButton;
    this.repeatButton = repeatButton;
    this.resizeTextView = resizeTextView;
    this.screenRotationButton = screenRotationButton;
    this.secondaryControls = secondaryControls;
    this.seekbarPreviewContainer = seekbarPreviewContainer;
    this.segmentsButton = segmentsButton;
    this.share = share;
    this.shuffleButton = shuffleButton;
    this.subtitleView = subtitleView;
    this.surfaceForeground = surfaceForeground;
    this.surfaceView = surfaceView;
    this.switchMute = switchMute;
    this.titleTextView = titleTextView;
    this.topControls = topControls;
    this.volumeImageView = volumeImageView;
    this.volumeProgressBar = volumeProgressBar;
    this.volumeRelativeLayout = volumeRelativeLayout;
  }

  @Override
  @NonNull
  public RelativeLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static PlayerBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static PlayerBinding inflate(@NonNull LayoutInflater inflater, @Nullable ViewGroup parent,
      boolean attachToParent) {
    View root = inflater.inflate(R.layout.player, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static PlayerBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.bottomControls;
      LinearLayout bottomControls = ViewBindings.findChildViewById(rootView, id);
      if (bottomControls == null) {
        break missingId;
      }

      id = R.id.bottomSeekbarPreviewLayout;
      LinearLayout bottomSeekbarPreviewLayout = ViewBindings.findChildViewById(rootView, id);
      if (bottomSeekbarPreviewLayout == null) {
        break missingId;
      }

      id = R.id.brightnessImageView;
      ImageView brightnessImageView = ViewBindings.findChildViewById(rootView, id);
      if (brightnessImageView == null) {
        break missingId;
      }

      id = R.id.brightnessProgressBar;
      ProgressBar brightnessProgressBar = ViewBindings.findChildViewById(rootView, id);
      if (brightnessProgressBar == null) {
        break missingId;
      }

      id = R.id.brightnessRelativeLayout;
      RelativeLayout brightnessRelativeLayout = ViewBindings.findChildViewById(rootView, id);
      if (brightnessRelativeLayout == null) {
        break missingId;
      }

      id = R.id.captionTextView;
      TextView captionTextView = ViewBindings.findChildViewById(rootView, id);
      if (captionTextView == null) {
        break missingId;
      }

      id = R.id.channelTextView;
      TextView channelTextView = ViewBindings.findChildViewById(rootView, id);
      if (channelTextView == null) {
        break missingId;
      }

      id = R.id.closeButton;
      Button closeButton = ViewBindings.findChildViewById(rootView, id);
      if (closeButton == null) {
        break missingId;
      }

      id = R.id.closingOverlay;
      View closingOverlay = ViewBindings.findChildViewById(rootView, id);
      if (closingOverlay == null) {
        break missingId;
      }

      id = R.id.controlAnimationView;
      ImageView controlAnimationView = ViewBindings.findChildViewById(rootView, id);
      if (controlAnimationView == null) {
        break missingId;
      }

      id = R.id.currentDisplaySeek;
      TextView currentDisplaySeek = ViewBindings.findChildViewById(rootView, id);
      if (currentDisplaySeek == null) {
        break missingId;
      }

      id = R.id.currentSeekbarPreviewThumbnail;
      ImageView currentSeekbarPreviewThumbnail = ViewBindings.findChildViewById(rootView, id);
      if (currentSeekbarPreviewThumbnail == null) {
        break missingId;
      }

      id = R.id.endScreen;
      ImageView endScreen = ViewBindings.findChildViewById(rootView, id);
      if (endScreen == null) {
        break missingId;
      }

      id = R.id.fullScreenButton;
      AppCompatImageButton fullScreenButton = ViewBindings.findChildViewById(rootView, id);
      if (fullScreenButton == null) {
        break missingId;
      }

      id = R.id.itemsList;
      RecyclerView itemsList = ViewBindings.findChildViewById(rootView, id);
      if (itemsList == null) {
        break missingId;
      }

      id = R.id.itemsListClose;
      AppCompatImageButton itemsListClose = ViewBindings.findChildViewById(rootView, id);
      if (itemsListClose == null) {
        break missingId;
      }

      id = R.id.itemsListControl;
      RelativeLayout itemsListControl = ViewBindings.findChildViewById(rootView, id);
      if (itemsListControl == null) {
        break missingId;
      }

      id = R.id.itemsListHeaderDuration;
      AppCompatTextView itemsListHeaderDuration = ViewBindings.findChildViewById(rootView, id);
      if (itemsListHeaderDuration == null) {
        break missingId;
      }

      id = R.id.itemsListHeaderTitle;
      AppCompatTextView itemsListHeaderTitle = ViewBindings.findChildViewById(rootView, id);
      if (itemsListHeaderTitle == null) {
        break missingId;
      }

      id = R.id.itemsListPanel;
      RelativeLayout itemsListPanel = ViewBindings.findChildViewById(rootView, id);
      if (itemsListPanel == null) {
        break missingId;
      }

      id = R.id.loading_panel;
      RelativeLayout loadingPanel = ViewBindings.findChildViewById(rootView, id);
      if (loadingPanel == null) {
        break missingId;
      }

      id = R.id.metadataView;
      LinearLayout metadataView = ViewBindings.findChildViewById(rootView, id);
      if (metadataView == null) {
        break missingId;
      }

      id = R.id.moreOptionsButton;
      AppCompatImageButton moreOptionsButton = ViewBindings.findChildViewById(rootView, id);
      if (moreOptionsButton == null) {
        break missingId;
      }

      id = R.id.openInBrowser;
      AppCompatImageButton openInBrowser = ViewBindings.findChildViewById(rootView, id);
      if (openInBrowser == null) {
        break missingId;
      }

      id = R.id.playNextButton;
      AppCompatImageButton playNextButton = ViewBindings.findChildViewById(rootView, id);
      if (playNextButton == null) {
        break missingId;
      }

      id = R.id.playPauseButton;
      AppCompatImageButton playPauseButton = ViewBindings.findChildViewById(rootView, id);
      if (playPauseButton == null) {
        break missingId;
      }

      id = R.id.playPreviousButton;
      AppCompatImageButton playPreviousButton = ViewBindings.findChildViewById(rootView, id);
      if (playPreviousButton == null) {
        break missingId;
      }

      id = R.id.playWithKodi;
      AppCompatImageButton playWithKodi = ViewBindings.findChildViewById(rootView, id);
      if (playWithKodi == null) {
        break missingId;
      }

      id = R.id.playbackControlRoot;
      RelativeLayout playbackControlRoot = ViewBindings.findChildViewById(rootView, id);
      if (playbackControlRoot == null) {
        break missingId;
      }

      id = R.id.playbackCurrentTime;
      TextView playbackCurrentTime = ViewBindings.findChildViewById(rootView, id);
      if (playbackCurrentTime == null) {
        break missingId;
      }

      id = R.id.playbackEndTime;
      TextView playbackEndTime = ViewBindings.findChildViewById(rootView, id);
      if (playbackEndTime == null) {
        break missingId;
      }

      id = R.id.playbackLiveSync;
      TextView playbackLiveSync = ViewBindings.findChildViewById(rootView, id);
      if (playbackLiveSync == null) {
        break missingId;
      }

      id = R.id.playbackSeekBar;
      FocusAwareSeekBar playbackSeekBar = ViewBindings.findChildViewById(rootView, id);
      if (playbackSeekBar == null) {
        break missingId;
      }

      id = R.id.playbackSpeed;
      TextView playbackSpeed = ViewBindings.findChildViewById(rootView, id);
      if (playbackSpeed == null) {
        break missingId;
      }

      id = R.id.playbackWindowRoot;
      RelativeLayout playbackWindowRoot = ViewBindings.findChildViewById(rootView, id);
      if (playbackWindowRoot == null) {
        break missingId;
      }

      id = R.id.playerBottomShadow;
      View playerBottomShadow = ViewBindings.findChildViewById(rootView, id);
      if (playerBottomShadow == null) {
        break missingId;
      }

      id = R.id.playerCloseButton;
      AppCompatImageButton playerCloseButton = ViewBindings.findChildViewById(rootView, id);
      if (playerCloseButton == null) {
        break missingId;
      }

      id = R.id.player_overlays;
      RelativeLayout playerOverlays = ViewBindings.findChildViewById(rootView, id);
      if (playerOverlays == null) {
        break missingId;
      }

      id = R.id.playerTopShadow;
      View playerTopShadow = ViewBindings.findChildViewById(rootView, id);
      if (playerTopShadow == null) {
        break missingId;
      }

      id = R.id.primaryControls;
      LinearLayout primaryControls = ViewBindings.findChildViewById(rootView, id);
      if (primaryControls == null) {
        break missingId;
      }

      id = R.id.progressBarLoadingPanel;
      ProgressBar progressBarLoadingPanel = ViewBindings.findChildViewById(rootView, id);
      if (progressBarLoadingPanel == null) {
        break missingId;
      }

      id = R.id.qualityTextView;
      TextView qualityTextView = ViewBindings.findChildViewById(rootView, id);
      if (qualityTextView == null) {
        break missingId;
      }

      id = R.id.queueButton;
      AppCompatImageButton queueButton = ViewBindings.findChildViewById(rootView, id);
      if (queueButton == null) {
        break missingId;
      }

      id = R.id.repeatButton;
      AppCompatImageButton repeatButton = ViewBindings.findChildViewById(rootView, id);
      if (repeatButton == null) {
        break missingId;
      }

      id = R.id.resizeTextView;
      TextView resizeTextView = ViewBindings.findChildViewById(rootView, id);
      if (resizeTextView == null) {
        break missingId;
      }

      id = R.id.screenRotationButton;
      AppCompatImageButton screenRotationButton = ViewBindings.findChildViewById(rootView, id);
      if (screenRotationButton == null) {
        break missingId;
      }

      id = R.id.secondaryControls;
      LinearLayout secondaryControls = ViewBindings.findChildViewById(rootView, id);
      if (secondaryControls == null) {
        break missingId;
      }

      id = R.id.seekbarPreviewContainer;
      LinearLayout seekbarPreviewContainer = ViewBindings.findChildViewById(rootView, id);
      if (seekbarPreviewContainer == null) {
        break missingId;
      }

      id = R.id.segmentsButton;
      AppCompatImageButton segmentsButton = ViewBindings.findChildViewById(rootView, id);
      if (segmentsButton == null) {
        break missingId;
      }

      id = R.id.share;
      AppCompatImageButton share = ViewBindings.findChildViewById(rootView, id);
      if (share == null) {
        break missingId;
      }

      id = R.id.shuffleButton;
      AppCompatImageButton shuffleButton = ViewBindings.findChildViewById(rootView, id);
      if (shuffleButton == null) {
        break missingId;
      }

      id = R.id.subtitleView;
      SubtitleView subtitleView = ViewBindings.findChildViewById(rootView, id);
      if (subtitleView == null) {
        break missingId;
      }

      id = R.id.surfaceForeground;
      View surfaceForeground = ViewBindings.findChildViewById(rootView, id);
      if (surfaceForeground == null) {
        break missingId;
      }

      id = R.id.surfaceView;
      ExpandableSurfaceView surfaceView = ViewBindings.findChildViewById(rootView, id);
      if (surfaceView == null) {
        break missingId;
      }

      id = R.id.switchMute;
      AppCompatImageButton switchMute = ViewBindings.findChildViewById(rootView, id);
      if (switchMute == null) {
        break missingId;
      }

      id = R.id.titleTextView;
      TextView titleTextView = ViewBindings.findChildViewById(rootView, id);
      if (titleTextView == null) {
        break missingId;
      }

      id = R.id.topControls;
      LinearLayout topControls = ViewBindings.findChildViewById(rootView, id);
      if (topControls == null) {
        break missingId;
      }

      id = R.id.volumeImageView;
      ImageView volumeImageView = ViewBindings.findChildViewById(rootView, id);
      if (volumeImageView == null) {
        break missingId;
      }

      id = R.id.volumeProgressBar;
      ProgressBar volumeProgressBar = ViewBindings.findChildViewById(rootView, id);
      if (volumeProgressBar == null) {
        break missingId;
      }

      id = R.id.volumeRelativeLayout;
      RelativeLayout volumeRelativeLayout = ViewBindings.findChildViewById(rootView, id);
      if (volumeRelativeLayout == null) {
        break missingId;
      }

      return new PlayerBinding((RelativeLayout) rootView, bottomControls,
          bottomSeekbarPreviewLayout, brightnessImageView, brightnessProgressBar,
          brightnessRelativeLayout, captionTextView, channelTextView, closeButton, closingOverlay,
          controlAnimationView, currentDisplaySeek, currentSeekbarPreviewThumbnail, endScreen,
          fullScreenButton, itemsList, itemsListClose, itemsListControl, itemsListHeaderDuration,
          itemsListHeaderTitle, itemsListPanel, loadingPanel, metadataView, moreOptionsButton,
          openInBrowser, playNextButton, playPauseButton, playPreviousButton, playWithKodi,
          playbackControlRoot, playbackCurrentTime, playbackEndTime, playbackLiveSync,
          playbackSeekBar, playbackSpeed, playbackWindowRoot, playerBottomShadow, playerCloseButton,
          playerOverlays, playerTopShadow, primaryControls, progressBarLoadingPanel,
          qualityTextView, queueButton, repeatButton, resizeTextView, screenRotationButton,
          secondaryControls, seekbarPreviewContainer, segmentsButton, share, shuffleButton,
          subtitleView, surfaceForeground, surfaceView, switchMute, titleTextView, topControls,
          volumeImageView, volumeProgressBar, volumeRelativeLayout);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
